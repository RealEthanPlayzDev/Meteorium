{"version":3,"file":"index.cjs","sources":["../src/types/channel.ts","../src/types/comment.ts","../src/types/song.ts","../src/types/video.ts","../src/client.ts"],"sourcesContent":["import { ChannelType } from './enums/channel-type';\nimport { ChannelRaw } from './raw/channel-raw';\n\nexport class Channel {\n  public toRaw() {\n    return this.raw;\n  }\n\n  /**\n   * The unique ID of the channel.\n   */\n  public get channelId() {\n    return this.raw.id;\n  }\n\n  /**\n   * The channel's name.\n   */\n  public get name() {\n    return this.raw.name;\n  }\n\n  /**\n   * The channel's name in English, if it has one.\n   */\n  public get englishName() {\n    return this.raw.english_name;\n  }\n\n  /**\n   * The type of the channel, either vtuber or subber.\n   */\n  public get channelType(): ChannelType {\n    return this.raw.type;\n  }\n\n  /**\n   * The channel's organization. Mainly used for VTubers only.\n   */\n  public get organization() {\n    return this.raw.org;\n  }\n\n  /**\n   * The channel's group/suborganization. Mainly used for VTubers only, that allows them to be sorted internally.\n   */\n  public get group() {\n    return this.raw.group ?? this.raw.suborg?.substr(2);\n  }\n\n  public get sortKey() {\n    return this.raw.suborg ?? this.group ?? this.organization ?? this.name;\n  }\n\n  /**\n   * The internal URL of the channel's profile picture.\n   */\n  public get avatarUrl() {\n    return this.raw.photo;\n  }\n\n  /**\n   * The internal URL of the channel's channel banner.\n   */\n  public get bannerUrl() {\n    return this.raw.banner;\n  }\n\n  /**\n   * The channel's Twitter handle, if they have one.\n   */\n  public get twitterName() {\n    return this.raw.twitter;\n  }\n\n  /**\n   * The number of videos the channel has uploaded.\n   */\n  public get videoCount() {\n    return typeof this.raw.video_count === 'string'\n      ? Number(this.raw.video_count)\n      : this.raw.video_count;\n  }\n\n  /**\n   * The estimated amount of subscribers the channel has.\n   */\n  public get subscriberCount() {\n    return typeof this.raw.subscriber_count === 'string'\n      ? Number(this.raw.subscriber_count)\n      : this.raw.subscriber_count;\n  }\n\n  /**\n   * The total number of views the channel has.\n   */\n  public get viewCount() {\n    return typeof this.raw.view_count === 'string'\n      ? Number(this.raw.view_count)\n      : this.raw.view_count;\n  }\n\n  /**\n   * The total number of clips associated with this channel. Mainly used for VTubers only.\n   */\n  public get clipCount() {\n    return typeof this.raw.clip_count === 'string'\n      ? Number(this.raw.clip_count)\n      : this.raw.clip_count;\n  }\n\n  /**\n   * The language of the channel. Mainly used for Subbers only.\n   */\n  public get language() {\n    return this.raw.lang;\n  }\n\n  /**\n   * The date this channel was created.\n   */\n  public get createdAt() {\n    return typeof this.raw.published_at === 'string'\n      ? new Date(this.raw.published_at)\n      : undefined;\n  }\n\n  /**\n   * Whether or not the channel has been marked as inactive.\n   */\n  public get isInactive() {\n    return this.raw.inactive;\n  }\n\n  /**\n   * The channel's description on YouTube.\n   */\n  public get description() {\n    return this.raw.description;\n  }\n\n  constructor(private raw: ChannelRaw) {}\n}\n","import { CommentRaw } from './raw/comment-raw';\n\nexport class Comment {\n  /**\n   * The unique key associated with the comment.\n   */\n  public get key() {\n    return this.raw.comment_key;\n  }\n\n  /**\n   * The video ID the comment is linked to.\n   */\n  public get videoId() {\n    return this.raw.video_id;\n  }\n\n  /**\n   * The message content of the comment. Usually contains timestamps.\n   */\n  public get content() {\n    return this.raw.message;\n  }\n\n  constructor(private raw: CommentRaw) {}\n}\n","import { SongRaw } from './raw/song-raw';\n\nexport class Song {\n  /**\n   * The URL of the cover art.\n   */\n  public get artUrl() {\n    return this.raw.art;\n  }\n\n  /**\n   * The name of the song.\n   */\n  public get name() {\n    return this.raw.name;\n  }\n\n  /**\n   * The time in the associated {@link Video} where the song began.\n   */\n  public get startTime() {\n    return this.raw.start;\n  }\n\n  /**\n   * The time in the associated {@link Video} where the song ended.\n   */\n  public get endTime() {\n    return this.raw.end;\n  }\n\n  /**\n   * The unique ID of the song on iTunes, if it is on iTunes.\n   */\n  public get iTunesId() {\n    return this.raw.itunesid;\n  }\n\n  /**\n   * The original artist who created/sang the song.\n   */\n  public get artist() {\n    return this.raw.original_artist;\n  }\n\n  constructor(private raw: SongRaw) {}\n}\n","import { Channel } from './channel';\nimport { Comment } from './comment';\nimport { VideoRaw } from './raw/video-raw';\nimport { Song } from './song';\n\nexport class Video {\n  public toRaw() {\n    return this.raw;\n  }\n\n  /**\n   * The unique ID of the video.\n   */\n  public get videoId() {\n    return this.raw.id;\n  }\n\n  /**\n   * The video's title.\n   */\n  public get title() {\n    return this.raw.title;\n  }\n\n  /**\n   * The type of video, whether it is a stream or a clip.\n   */\n  public get videoType() {\n    return this.raw.type;\n  }\n\n  /**\n   * The internal topic ID of the video. Some videos, mostly clips, may not have a topic.\n   */\n  public get topic() {\n    return this.raw.topic_id;\n  }\n\n  /**\n   * The date the video was published at.\n   */\n  public get publishedAt() {\n    return typeof this.raw.published_at === 'string'\n      ? new Date(this.raw.published_at)\n      : undefined;\n  }\n\n  /**\n   * The date the video was made available. This takes on the first non-null value of {@link Video.publishedAt},\n   * {@link Video.actualStart}, {@link Video.scheduledStart}, or {@link Video.actualEnd}.\n   */\n  public get availableAt() {\n    return typeof this.raw.available_at === 'string'\n      ? new Date(this.raw.available_at)\n      : undefined;\n  }\n\n  /**\n   * The duration of the video.\n   */\n  public get duration() {\n    return this.raw.duration;\n  }\n\n  /**\n   * The current status of the video on YouTube.\n   */\n  public get status() {\n    return this.raw.status;\n  }\n\n  /**\n   * The date when the stream started. Used with {@link ExtraData.LiveInfo}\n   */\n  public get scheduledStart() {\n    return typeof this.raw.start_scheduled === 'string'\n      ? new Date(this.raw.start_scheduled)\n      : undefined;\n  }\n\n  /**\n   * The date when the stream actually started. Used with {@link ExtraData.LiveInfo}\n   */\n  public get actualStart() {\n    return typeof this.raw.start_actual === 'string'\n      ? new Date(this.raw.start_actual)\n      : undefined;\n  }\n\n  /**\n   * The date when the stream ended. Used with {@link ExtraData.LiveInfo}\n   */\n  public get actualEnd() {\n    return typeof this.raw.end_actual === 'string'\n      ? new Date(this.raw.end_actual)\n      : undefined;\n  }\n\n  /**\n   * The number of people currently watching the stream. Used with {@link ExtraData.LiveInfo}\n   */\n  public get liveViewers() {\n    return this.raw.live_viewers;\n  }\n\n  /**\n   * The description of the video. Used with {@link ExtraData.Description}\n   */\n  public get description() {\n    return this.raw.description;\n  }\n\n  /**\n   * The number of tagged songs related to this video.\n   */\n  public get songCount() {\n    return this.raw.songcount;\n  }\n\n  /**\n   * The channel ID the video creator.\n   */\n  public get channelId() {\n    return this.raw.channel_id ?? this.channel.channelId;\n  }\n\n  /**\n   * The {@link Channel} object of the video creator.\n   */\n  public readonly channel: Channel;\n\n  /**\n   * A list of comments on this video, usually with timestamps. Used when searching for a specific video.\n   */\n  public readonly comments: Readonly<Comment[]>;\n\n  /**\n   * A list of clips related to this video. Used with {@link ExtraData.Clips}\n   */\n  public readonly clips: Readonly<Video[]>;\n\n  /**\n   * A list of sources for videos uploaded by Subbers. Used with {@link ExtraData.Sources}. Has no effect on VTubers.\n   */\n  public readonly sources: Readonly<Video[]>;\n\n  /**\n   * A list of videos that are referred by this video. Used with {@link ExtraData.Refers}\n   */\n  public readonly refers: Readonly<Video[]>;\n\n  /**\n   * A list of videos that are simulcast on another channel. Used with {@link ExtraData.Simulcasts}\n   */\n  public readonly simulcasts: Readonly<Video[]>;\n\n  /**\n   * A list of channels that are mentioned by this video. Used with {@link ExtraData.Mentions}\n   */\n  public readonly mentions: Readonly<Channel[]>;\n\n  /**\n   * A list of songs used in this video. Used with {@link ExtraData.Songs}\n   */\n  public readonly songs: Readonly<Song[]>;\n\n  constructor(private raw: VideoRaw) {\n    this.channel = new Channel(this.raw.channel);\n    this.comments =\n      this.raw.comments?.map((comment) => new Comment(comment)) ?? [];\n    this.clips = this.raw.clips?.map((video) => new Video(video)) ?? [];\n    this.sources = this.raw.sources?.map((video) => new Video(video)) ?? [];\n    this.refers = this.raw.refers?.map((video) => new Video(video)) ?? [];\n    this.simulcasts =\n      this.raw.simulcasts?.map((video) => new Video(video)) ?? [];\n    this.mentions =\n      this.raw.mentions?.map((channel) => new Channel(channel)) ?? [];\n    this.songs = this.raw.songs?.map((song) => new Song(song)) ?? [];\n  }\n}\n","import { strict as assert } from 'assert';\nimport axios, { AxiosInstance } from 'axios';\nimport axiosRetry from 'axios-retry';\nimport querystring from 'querystring';\nimport {\n  Channel,\n  ChannelRaw,\n  ChannelsParam,\n  ChannelVideosParam,\n  Options,\n  SortOrder,\n  Video,\n  VideoRaw,\n  VideoSearchType,\n  VideosParam,\n} from './types';\n\nexport class HolodexApiClient {\n  private httpClient: AxiosInstance;\n\n  constructor(options: Partial<Options>) {\n    options.url ??= 'https://holodex.net/api/v2';\n\n    assert.ok(typeof options.apiKey === 'string', 'apiKey not provided.');\n\n    this.httpClient = axios.create({\n      baseURL: options.url,\n      headers: {\n        'X-APIKEY': options.apiKey,\n      },\n    });\n    axiosRetry(this.httpClient, {\n      retries: 3,\n      retryDelay: axiosRetry.exponentialDelay,\n      retryCondition: (error) =>\n        axiosRetry.isNetworkOrIdempotentRequestError(error) ||\n        error.code === 'ECONNABORTED',\n      shouldResetTimeout: true,\n    });\n  }\n\n  /**\n   * Retrieves a list of channels that match the given parameters.\n   * @param params See {@link ChannelsParam}\n   */\n  async getChannels(params: ChannelsParam = {}) {\n    params.limit ??= 25;\n    params.offset ??= 0;\n    params.order ??= SortOrder.Ascending;\n    params.sort ??= 'org';\n    if (params.lang && Array.isArray(params.lang)) {\n      params.lang = params.lang.join(',');\n    }\n\n    const q = querystring.stringify({\n      ...params,\n      limit: Math.min(Math.max(params.limit, 1), 50),\n    });\n    const { data } = await this.httpClient.get<ChannelRaw[]>(`/channels?${q}`);\n    return data.map((channel) => new Channel(channel));\n  }\n\n  /**\n   * Retrieves a single channel.\n   * @param channelId ID of the Youtube Channel that is being queried\n   */\n  async getChannel(channelId: string) {\n    const { data } = await this.httpClient.get<ChannelRaw>(\n      `/channels/${channelId}`,\n    );\n    return new Channel(data);\n  }\n\n  /**\n   * A simplified endpoint for access channel specific data.\n   * @param channelId ID of the Youtube Channel that is being queried\n   * @param searchType The type of video resource to fetch. `clips` finds clip videos of a vtuber channel, `videos` finds the channelId channel's uploads, and `collabs` finds videos uploaded by other channels that mention this channelId\n   * @param params See {@link ChannelVideosParam}\n   */\n  async getVideosByChannelId(\n    channelId: string,\n    searchType = VideoSearchType.Videos,\n    params: ChannelVideosParam = {},\n  ) {\n    params.lang ??= 'all';\n    params.limit ??= 25;\n    params.offset ??= 0;\n\n    const q = querystring.stringify({\n      ...params,\n      include: Array.isArray(params.include)\n        ? params.include.join(',')\n        : params.include,\n      lang: Array.isArray(params.lang) ? params.lang.join(',') : params.lang,\n      limit: Math.min(Math.max(params.limit, 1), 50),\n    });\n    const { data } = await this.httpClient.get<VideoRaw[]>(\n      `/channels/${channelId}/${searchType}?${q}`,\n    );\n    return data.map((video) => new Video(video));\n  }\n\n  /**\n   * Retrieves a video object.\n   * @param videoId ID of a Youtube Video\n   * @param includeComments if true then will reply with timestamp comments for this video\n   * @param languages A comma separated list of language codes to filter channels/clips, official streams do not follow this parameter\n   */\n  async getVideo(\n    videoId: string,\n    includeComments = false,\n    languages?: string[] | string,\n  ) {\n    languages ??= 'all';\n\n    const params: any = {\n      lang: Array.isArray(languages) ? languages.join(',') : languages,\n    };\n    if (includeComments) {\n      params.c = 1;\n    }\n\n    const q = querystring.stringify(params);\n    const { data } = await this.httpClient.get<VideoRaw>(\n      `/videos/${videoId}?${q}`,\n    );\n    return new Video(data);\n  }\n\n  /**\n   * This endpoint is similar to the /live endpoint and usually replies much faster. It is more friendly in general. The cost to execute a lookup is significantly cheaper. It's unfortunately less customizable as a result.\n   *\n   * We recommends using this if you have a fixed set of channel IDs to look up status for.\n   *\n   * @param channelIds comma separated Youtube Channel IDs\n   */\n  async getLiveVideosByChannelId(channelIds: string | string[]) {\n    const q = querystring.stringify({\n      channels: Array.isArray(channelIds) ? channelIds.join(',') : channelIds,\n    });\n    const { data } = await this.httpClient.get<VideoRaw[]>(`/users/live?${q}`);\n    return data.map((video) => new Video(video));\n  }\n\n  /**\n   * Retrieve all live streams for the given paramaters.\n   *\n   * This is somewhat similar to calling `getVideos`, but this endpoint imposes default values on the query parameters.\n   *\n   * @param params See {@link VideosParam}\n   */\n  async getLiveVideos(params: VideosParam = {}) {\n    params.lang ??= 'all';\n    params.offset ??= 0;\n\n    const q = querystring.stringify({\n      ...params,\n      include: Array.isArray(params.include)\n        ? params.include.join(',')\n        : params.include,\n      lang: Array.isArray(params.lang) ? params.lang.join(',') : params.lang,\n    });\n    const { data } = await this.httpClient.get<VideoRaw[]>(`/live?${q}`);\n    return data.map((video) => new Video(video));\n  }\n\n  /**\n   * Retrieve videos matching the given parameters.\n   *\n   * @param params See {@link VideosParam}\n   */\n  async getVideos(params: VideosParam = {}) {\n    params.lang ??= 'all';\n    params.limit ??= 25;\n    params.offset ??= 0;\n    params.order ??= SortOrder.Descending;\n    params.sort ??= 'available_at';\n\n    const q = querystring.stringify({\n      ...params,\n      include: Array.isArray(params.include)\n        ? params.include.join(',')\n        : params.include,\n      lang: Array.isArray(params.lang) ? params.lang.join(',') : params.lang,\n      limit: Math.min(Math.max(params.limit, 1), 50),\n    });\n    const { data } = await this.httpClient.get<VideoRaw[]>(`/videos?${q}`);\n    return data.map((video) => new Video(video));\n  }\n}\n"],"names":["Channel","toRaw","raw","channelId","id","name","englishName","english_name","channelType","type","organization","org","group","suborg","substr","sortKey","avatarUrl","photo","bannerUrl","banner","twitterName","twitter","videoCount","video_count","Number","subscriberCount","subscriber_count","viewCount","view_count","clipCount","clip_count","language","lang","createdAt","published_at","Date","undefined","isInactive","inactive","description","constructor","Comment","key","comment_key","videoId","video_id","content","message","Song","artUrl","art","startTime","start","endTime","end","iTunesId","itunesid","artist","original_artist","Video","title","videoType","topic","topic_id","publishedAt","availableAt","available_at","duration","status","scheduledStart","start_scheduled","actualStart","start_actual","actualEnd","end_actual","liveViewers","live_viewers","songCount","songcount","channel_id","channel","comments","clips","sources","refers","simulcasts","mentions","songs","map","comment","video","song","HolodexApiClient","options","httpClient","url","assert","ok","apiKey","axios","create","baseURL","headers","axiosRetry","retries","retryDelay","exponentialDelay","retryCondition","error","isNetworkOrIdempotentRequestError","code","shouldResetTimeout","getChannels","params","limit","offset","order","sort","Array","isArray","join","q","querystring","stringify","Math","min","max","data","get","getChannel","getVideosByChannelId","searchType","include","getVideo","includeComments","languages","c","getLiveVideosByChannelId","channelIds","channels","getLiveVideos","getVideos"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAGaA;AACJC,EAAAA,KAAK;AACV,WAAO,KAAKC,GAAZ;AACD;AAED;;;;;AAGoB,MAATC,SAAS;AAClB,WAAO,KAAKD,GAAL,CAASE,EAAhB;AACD;AAED;;;;;AAGe,MAAJC,IAAI;AACb,WAAO,KAAKH,GAAL,CAASG,IAAhB;AACD;AAED;;;;;AAGsB,MAAXC,WAAW;AACpB,WAAO,KAAKJ,GAAL,CAASK,YAAhB;AACD;AAED;;;;;AAGsB,MAAXC,WAAW;AACpB,WAAO,KAAKN,GAAL,CAASO,IAAhB;AACD;AAED;;;;;AAGuB,MAAZC,YAAY;AACrB,WAAO,KAAKR,GAAL,CAASS,GAAhB;AACD;AAED;;;;;AAGgB,MAALC,KAAK;;;AACd,8BAAO,KAAKV,GAAL,CAASU,KAAhB,kDAAyB,KAAKV,GAAL,CAASW,MAAlC,qBAAyB,iBAAiBC,MAAjB,CAAwB,CAAxB,CAAzB;AACD;;AAEiB,MAAPC,OAAO;;;AAChB,iDAAO,KAAKb,GAAL,CAASW,MAAhB,gCAA0B,KAAKD,KAA/B,oBAAwC,KAAKF,YAA7C,mBAA6D,KAAKL,IAAlE;AACD;AAED;;;;;AAGoB,MAATW,SAAS;AAClB,WAAO,KAAKd,GAAL,CAASe,KAAhB;AACD;AAED;;;;;AAGoB,MAATC,SAAS;AAClB,WAAO,KAAKhB,GAAL,CAASiB,MAAhB;AACD;AAED;;;;;AAGsB,MAAXC,WAAW;AACpB,WAAO,KAAKlB,GAAL,CAASmB,OAAhB;AACD;AAED;;;;;AAGqB,MAAVC,UAAU;AACnB,WAAO,OAAO,KAAKpB,GAAL,CAASqB,WAAhB,KAAgC,QAAhC,GACHC,MAAM,CAAC,KAAKtB,GAAL,CAASqB,WAAV,CADH,GAEH,KAAKrB,GAAL,CAASqB,WAFb;AAGD;AAED;;;;;AAG0B,MAAfE,eAAe;AACxB,WAAO,OAAO,KAAKvB,GAAL,CAASwB,gBAAhB,KAAqC,QAArC,GACHF,MAAM,CAAC,KAAKtB,GAAL,CAASwB,gBAAV,CADH,GAEH,KAAKxB,GAAL,CAASwB,gBAFb;AAGD;AAED;;;;;AAGoB,MAATC,SAAS;AAClB,WAAO,OAAO,KAAKzB,GAAL,CAAS0B,UAAhB,KAA+B,QAA/B,GACHJ,MAAM,CAAC,KAAKtB,GAAL,CAAS0B,UAAV,CADH,GAEH,KAAK1B,GAAL,CAAS0B,UAFb;AAGD;AAED;;;;;AAGoB,MAATC,SAAS;AAClB,WAAO,OAAO,KAAK3B,GAAL,CAAS4B,UAAhB,KAA+B,QAA/B,GACHN,MAAM,CAAC,KAAKtB,GAAL,CAAS4B,UAAV,CADH,GAEH,KAAK5B,GAAL,CAAS4B,UAFb;AAGD;AAED;;;;;AAGmB,MAARC,QAAQ;AACjB,WAAO,KAAK7B,GAAL,CAAS8B,IAAhB;AACD;AAED;;;;;AAGoB,MAATC,SAAS;AAClB,WAAO,OAAO,KAAK/B,GAAL,CAASgC,YAAhB,KAAiC,QAAjC,GACH,IAAIC,IAAJ,CAAS,KAAKjC,GAAL,CAASgC,YAAlB,CADG,GAEHE,SAFJ;AAGD;AAED;;;;;AAGqB,MAAVC,UAAU;AACnB,WAAO,KAAKnC,GAAL,CAASoC,QAAhB;AACD;AAED;;;;;AAGsB,MAAXC,WAAW;AACpB,WAAO,KAAKrC,GAAL,CAASqC,WAAhB;AACD;;AAEDC,EAAAA,YAAoBtC;SAAAA;AAAA,YAAA,GAAAA,GAAA;AAAmB;;;;MC3I5BuC;AACX;;;AAGc,MAAHC,GAAG;AACZ,WAAO,KAAKxC,GAAL,CAASyC,WAAhB;AACD;AAED;;;;;AAGkB,MAAPC,OAAO;AAChB,WAAO,KAAK1C,GAAL,CAAS2C,QAAhB;AACD;AAED;;;;;AAGkB,MAAPC,OAAO;AAChB,WAAO,KAAK5C,GAAL,CAAS6C,OAAhB;AACD;;AAEDP,EAAAA,YAAoBtC;SAAAA;AAAA,YAAA,GAAAA,GAAA;AAAmB;;;;MCtB5B8C;AACX;;;AAGiB,MAANC,MAAM;AACf,WAAO,KAAK/C,GAAL,CAASgD,GAAhB;AACD;AAED;;;;;AAGe,MAAJ7C,IAAI;AACb,WAAO,KAAKH,GAAL,CAASG,IAAhB;AACD;AAED;;;;;AAGoB,MAAT8C,SAAS;AAClB,WAAO,KAAKjD,GAAL,CAASkD,KAAhB;AACD;AAED;;;;;AAGkB,MAAPC,OAAO;AAChB,WAAO,KAAKnD,GAAL,CAASoD,GAAhB;AACD;AAED;;;;;AAGmB,MAARC,QAAQ;AACjB,WAAO,KAAKrD,GAAL,CAASsD,QAAhB;AACD;AAED;;;;;AAGiB,MAANC,MAAM;AACf,WAAO,KAAKvD,GAAL,CAASwD,eAAhB;AACD;;AAEDlB,EAAAA,YAAoBtC;SAAAA;AAAA,YAAA,GAAAA,GAAA;AAAgB;;;;MCxCzByD;AACJ1D,EAAAA,KAAK;AACV,WAAO,KAAKC,GAAZ;AACD;AAED;;;;;AAGkB,MAAP0C,OAAO;AAChB,WAAO,KAAK1C,GAAL,CAASE,EAAhB;AACD;AAED;;;;;AAGgB,MAALwD,KAAK;AACd,WAAO,KAAK1D,GAAL,CAAS0D,KAAhB;AACD;AAED;;;;;AAGoB,MAATC,SAAS;AAClB,WAAO,KAAK3D,GAAL,CAASO,IAAhB;AACD;AAED;;;;;AAGgB,MAALqD,KAAK;AACd,WAAO,KAAK5D,GAAL,CAAS6D,QAAhB;AACD;AAED;;;;;AAGsB,MAAXC,WAAW;AACpB,WAAO,OAAO,KAAK9D,GAAL,CAASgC,YAAhB,KAAiC,QAAjC,GACH,IAAIC,IAAJ,CAAS,KAAKjC,GAAL,CAASgC,YAAlB,CADG,GAEHE,SAFJ;AAGD;AAED;;;;;;AAIsB,MAAX6B,WAAW;AACpB,WAAO,OAAO,KAAK/D,GAAL,CAASgE,YAAhB,KAAiC,QAAjC,GACH,IAAI/B,IAAJ,CAAS,KAAKjC,GAAL,CAASgE,YAAlB,CADG,GAEH9B,SAFJ;AAGD;AAED;;;;;AAGmB,MAAR+B,QAAQ;AACjB,WAAO,KAAKjE,GAAL,CAASiE,QAAhB;AACD;AAED;;;;;AAGiB,MAANC,MAAM;AACf,WAAO,KAAKlE,GAAL,CAASkE,MAAhB;AACD;AAED;;;;;AAGyB,MAAdC,cAAc;AACvB,WAAO,OAAO,KAAKnE,GAAL,CAASoE,eAAhB,KAAoC,QAApC,GACH,IAAInC,IAAJ,CAAS,KAAKjC,GAAL,CAASoE,eAAlB,CADG,GAEHlC,SAFJ;AAGD;AAED;;;;;AAGsB,MAAXmC,WAAW;AACpB,WAAO,OAAO,KAAKrE,GAAL,CAASsE,YAAhB,KAAiC,QAAjC,GACH,IAAIrC,IAAJ,CAAS,KAAKjC,GAAL,CAASsE,YAAlB,CADG,GAEHpC,SAFJ;AAGD;AAED;;;;;AAGoB,MAATqC,SAAS;AAClB,WAAO,OAAO,KAAKvE,GAAL,CAASwE,UAAhB,KAA+B,QAA/B,GACH,IAAIvC,IAAJ,CAAS,KAAKjC,GAAL,CAASwE,UAAlB,CADG,GAEHtC,SAFJ;AAGD;AAED;;;;;AAGsB,MAAXuC,WAAW;AACpB,WAAO,KAAKzE,GAAL,CAAS0E,YAAhB;AACD;AAED;;;;;AAGsB,MAAXrC,WAAW;AACpB,WAAO,KAAKrC,GAAL,CAASqC,WAAhB;AACD;AAED;;;;;AAGoB,MAATsC,SAAS;AAClB,WAAO,KAAK3E,GAAL,CAAS4E,SAAhB;AACD;AAED;;;;;AAGoB,MAAT3E,SAAS;;;AAClB,mCAAO,KAAKD,GAAL,CAAS6E,UAAhB,mCAA8B,KAAKC,OAAL,CAAa7E,SAA3C;AACD;AAED;;;;;AAwCAqC,EAAAA,YAAoBtC;;;SAAAA;SArCJ8E;SAKAC;SAKAC;SAKAC;SAKAC;SAKAC;SAKAC;SAKAC;AAEI,YAAA,GAAArF,GAAA;AAClB,SAAK8E,OAAL,GAAe,IAAIhF,OAAJ,CAAY,KAAKE,GAAL,CAAS8E,OAArB,CAAf;AACA,SAAKC,QAAL,kDACE,KAAK/E,GAAL,CAAS+E,QADX,qBACE,mBAAmBO,GAAnB,CAAwBC,OAAD,IAAa,IAAIhD,OAAJ,CAAYgD,OAAZ,CAApC,CADF,oCAC+D,EAD/D;AAEA,SAAKP,KAAL,6CAAa,KAAKhF,GAAL,CAASgF,KAAtB,qBAAa,gBAAgBM,GAAhB,CAAqBE,KAAD,IAAW,IAAI/B,KAAJ,CAAU+B,KAAV,CAA/B,CAAb,kCAAiE,EAAjE;AACA,SAAKP,OAAL,iDAAe,KAAKjF,GAAL,CAASiF,OAAxB,qBAAe,kBAAkBK,GAAlB,CAAuBE,KAAD,IAAW,IAAI/B,KAAJ,CAAU+B,KAAV,CAAjC,CAAf,oCAAqE,EAArE;AACA,SAAKN,MAAL,+CAAc,KAAKlF,GAAL,CAASkF,MAAvB,qBAAc,iBAAiBI,GAAjB,CAAsBE,KAAD,IAAW,IAAI/B,KAAJ,CAAU+B,KAAV,CAAhC,CAAd,mCAAmE,EAAnE;AACA,SAAKL,UAAL,oDACE,KAAKnF,GAAL,CAASmF,UADX,qBACE,qBAAqBG,GAArB,CAA0BE,KAAD,IAAW,IAAI/B,KAAJ,CAAU+B,KAAV,CAApC,CADF,oCAC2D,EAD3D;AAEA,SAAKJ,QAAL,kDACE,KAAKpF,GAAL,CAASoF,QADX,qBACE,mBAAmBE,GAAnB,CAAwBR,OAAD,IAAa,IAAIhF,OAAJ,CAAYgF,OAAZ,CAApC,CADF,oCAC+D,EAD/D;AAEA,SAAKO,KAAL,6CAAa,KAAKrF,GAAL,CAASqF,KAAtB,qBAAa,gBAAgBC,GAAhB,CAAqBG,IAAD,IAAU,IAAI3C,IAAJ,CAAS2C,IAAT,CAA9B,CAAb,kCAA8D,EAA9D;AACD;;;;MCjKUC;AAGXpD,EAAAA,YAAYqD;;;SAFJC;AAGN,oBAAAD,OAAO,CAACE,GAAR,2BAAAF,OAAO,CAACE,GAAR,GAAgB,4BAAhB;AAEAC,IAAAA,aAAM,CAACC,EAAP,CAAU,OAAOJ,OAAO,CAACK,MAAf,KAA0B,QAApC,EAA8C,sBAA9C;AAEA,SAAKJ,UAAL,GAAkBK,yBAAK,CAACC,MAAN,CAAa;AAC7BC,MAAAA,OAAO,EAAER,OAAO,CAACE,GADY;AAE7BO,MAAAA,OAAO,EAAE;AACP,oBAAYT,OAAO,CAACK;AADb;AAFoB,KAAb,CAAlB;AAMAK,IAAAA,8BAAU,CAAC,KAAKT,UAAN,EAAkB;AAC1BU,MAAAA,OAAO,EAAE,CADiB;AAE1BC,MAAAA,UAAU,EAAEF,8BAAU,CAACG,gBAFG;AAG1BC,MAAAA,cAAc,EAAGC,KAAD,IACdL,8BAAU,CAACM,iCAAX,CAA6CD,KAA7C,KACAA,KAAK,CAACE,IAAN,KAAe,cALS;AAM1BC,MAAAA,kBAAkB,EAAE;AANM,KAAlB,CAAV;AAQD;AAED;;;;;;AAIiB,QAAXC,WAAW,CAACC,SAAwB,EAAzB;;;AACf,qBAAAA,MAAM,CAACC,KAAP,4BAAAD,MAAM,CAACC,KAAP,GAAiB,EAAjB;AACA,sBAAAD,MAAM,CAACE,MAAP,6BAAAF,MAAM,CAACE,MAAP,GAAkB,CAAlB;AACA,qBAAAF,MAAM,CAACG,KAAP,4BAAAH,MAAM,CAACG,KAAP;;AAAA;AACA,oBAAAH,MAAM,CAACI,IAAP,2BAAAJ,MAAM,CAACI,IAAP,GAAgB,KAAhB;;AACA,QAAIJ,MAAM,CAACjF,IAAP,IAAesF,KAAK,CAACC,OAAN,CAAcN,MAAM,CAACjF,IAArB,CAAnB,EAA+C;AAC7CiF,MAAAA,MAAM,CAACjF,IAAP,GAAciF,MAAM,CAACjF,IAAP,CAAYwF,IAAZ,CAAiB,GAAjB,CAAd;AACD;;AAED,UAAMC,CAAC,GAAGC,+BAAW,CAACC,SAAZ,cACLV,MADK;AAERC,MAAAA,KAAK,EAAEU,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASb,MAAM,CAACC,KAAhB,EAAuB,CAAvB,CAAT,EAAoC,EAApC;AAFC,OAAV;AAIA,UAAM;AAAEa,MAAAA;AAAF,QAAW,MAAM,KAAKjC,UAAL,CAAgBkC,GAAhB,cAA+CP,GAA/C,CAAvB;AACA,WAAOM,IAAI,CAACvC,GAAL,CAAUR,OAAD,IAAa,IAAIhF,OAAJ,CAAYgF,OAAZ,CAAtB,CAAP;AACD;AAED;;;;;;AAIgB,QAAViD,UAAU,CAAC9H,SAAD;AACd,UAAM;AAAE4H,MAAAA;AAAF,QAAW,MAAM,KAAKjC,UAAL,CAAgBkC,GAAhB,cACR7H,WADQ,CAAvB;AAGA,WAAO,IAAIH,OAAJ,CAAY+H,IAAZ,CAAP;AACD;AAED;;;;;;;;AAM0B,QAApBG,oBAAoB,CACxB/H,SADwB,EAExBgI,UAAU;;AAFc,IAGxBlB,SAA6B,EAHL;;;AAKxB,oBAAAA,MAAM,CAACjF,IAAP,2BAAAiF,MAAM,CAACjF,IAAP,GAAgB,KAAhB;AACA,sBAAAiF,MAAM,CAACC,KAAP,6BAAAD,MAAM,CAACC,KAAP,GAAiB,EAAjB;AACA,uBAAAD,MAAM,CAACE,MAAP,8BAAAF,MAAM,CAACE,MAAP,GAAkB,CAAlB;AAEA,UAAMM,CAAC,GAAGC,+BAAW,CAACC,SAAZ,cACLV,MADK;AAERmB,MAAAA,OAAO,EAAEd,KAAK,CAACC,OAAN,CAAcN,MAAM,CAACmB,OAArB,IACLnB,MAAM,CAACmB,OAAP,CAAeZ,IAAf,CAAoB,GAApB,CADK,GAELP,MAAM,CAACmB,OAJH;AAKRpG,MAAAA,IAAI,EAAEsF,KAAK,CAACC,OAAN,CAAcN,MAAM,CAACjF,IAArB,IAA6BiF,MAAM,CAACjF,IAAP,CAAYwF,IAAZ,CAAiB,GAAjB,CAA7B,GAAqDP,MAAM,CAACjF,IAL1D;AAMRkF,MAAAA,KAAK,EAAEU,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASb,MAAM,CAACC,KAAhB,EAAuB,CAAvB,CAAT,EAAoC,EAApC;AANC,OAAV;AAQA,UAAM;AAAEa,MAAAA;AAAF,QAAW,MAAM,KAAKjC,UAAL,CAAgBkC,GAAhB,cACR7H,aAAagI,cAAcV,GADnB,CAAvB;AAGA,WAAOM,IAAI,CAACvC,GAAL,CAAUE,KAAD,IAAW,IAAI/B,KAAJ,CAAU+B,KAAV,CAApB,CAAP;AACD;AAED;;;;;;;;AAMc,QAAR2C,QAAQ,CACZzF,OADY,EAEZ0F,eAAe,GAAG,KAFN,EAGZC,SAHY;;;AAKZ,kBAAAA,SAAS,SAAT,gBAAAA,SAAS,GAAK,KAAd;AAEA,UAAMtB,MAAM,GAAQ;AAClBjF,MAAAA,IAAI,EAAEsF,KAAK,CAACC,OAAN,CAAcgB,SAAd,IAA2BA,SAAS,CAACf,IAAV,CAAe,GAAf,CAA3B,GAAiDe;AADrC,KAApB;;AAGA,QAAID,eAAJ,EAAqB;AACnBrB,MAAAA,MAAM,CAACuB,CAAP,GAAW,CAAX;AACD;;AAED,UAAMf,CAAC,GAAGC,+BAAW,CAACC,SAAZ,CAAsBV,MAAtB,CAAV;AACA,UAAM;AAAEc,MAAAA;AAAF,QAAW,MAAM,KAAKjC,UAAL,CAAgBkC,GAAhB,YACVpF,WAAW6E,GADD,CAAvB;AAGA,WAAO,IAAI9D,KAAJ,CAAUoE,IAAV,CAAP;AACD;AAED;;;;;;;;;AAO8B,QAAxBU,wBAAwB,CAACC,UAAD;AAC5B,UAAMjB,CAAC,GAAGC,+BAAW,CAACC,SAAZ,CAAsB;AAC9BgB,MAAAA,QAAQ,EAAErB,KAAK,CAACC,OAAN,CAAcmB,UAAd,IAA4BA,UAAU,CAAClB,IAAX,CAAgB,GAAhB,CAA5B,GAAmDkB;AAD/B,KAAtB,CAAV;AAGA,UAAM;AAAEX,MAAAA;AAAF,QAAW,MAAM,KAAKjC,UAAL,CAAgBkC,GAAhB,gBAA+CP,GAA/C,CAAvB;AACA,WAAOM,IAAI,CAACvC,GAAL,CAAUE,KAAD,IAAW,IAAI/B,KAAJ,CAAU+B,KAAV,CAApB,CAAP;AACD;AAED;;;;;;;;;AAOmB,QAAbkD,aAAa,CAAC3B,SAAsB,EAAvB;;;AACjB,qBAAAA,MAAM,CAACjF,IAAP,4BAAAiF,MAAM,CAACjF,IAAP,GAAgB,KAAhB;AACA,uBAAAiF,MAAM,CAACE,MAAP,8BAAAF,MAAM,CAACE,MAAP,GAAkB,CAAlB;AAEA,UAAMM,CAAC,GAAGC,+BAAW,CAACC,SAAZ,cACLV,MADK;AAERmB,MAAAA,OAAO,EAAEd,KAAK,CAACC,OAAN,CAAcN,MAAM,CAACmB,OAArB,IACLnB,MAAM,CAACmB,OAAP,CAAeZ,IAAf,CAAoB,GAApB,CADK,GAELP,MAAM,CAACmB,OAJH;AAKRpG,MAAAA,IAAI,EAAEsF,KAAK,CAACC,OAAN,CAAcN,MAAM,CAACjF,IAArB,IAA6BiF,MAAM,CAACjF,IAAP,CAAYwF,IAAZ,CAAiB,GAAjB,CAA7B,GAAqDP,MAAM,CAACjF;AAL1D,OAAV;AAOA,UAAM;AAAE+F,MAAAA;AAAF,QAAW,MAAM,KAAKjC,UAAL,CAAgBkC,GAAhB,UAAyCP,GAAzC,CAAvB;AACA,WAAOM,IAAI,CAACvC,GAAL,CAAUE,KAAD,IAAW,IAAI/B,KAAJ,CAAU+B,KAAV,CAApB,CAAP;AACD;AAED;;;;;;;AAKe,QAATmD,SAAS,CAAC5B,SAAsB,EAAvB;;;AACb,qBAAAA,MAAM,CAACjF,IAAP,4BAAAiF,MAAM,CAACjF,IAAP,GAAgB,KAAhB;AACA,sBAAAiF,MAAM,CAACC,KAAP,6BAAAD,MAAM,CAACC,KAAP,GAAiB,EAAjB;AACA,uBAAAD,MAAM,CAACE,MAAP,8BAAAF,MAAM,CAACE,MAAP,GAAkB,CAAlB;AACA,sBAAAF,MAAM,CAACG,KAAP,6BAAAH,MAAM,CAACG,KAAP;;AAAA;AACA,qBAAAH,MAAM,CAACI,IAAP,4BAAAJ,MAAM,CAACI,IAAP,GAAgB,cAAhB;AAEA,UAAMI,CAAC,GAAGC,+BAAW,CAACC,SAAZ,cACLV,MADK;AAERmB,MAAAA,OAAO,EAAEd,KAAK,CAACC,OAAN,CAAcN,MAAM,CAACmB,OAArB,IACLnB,MAAM,CAACmB,OAAP,CAAeZ,IAAf,CAAoB,GAApB,CADK,GAELP,MAAM,CAACmB,OAJH;AAKRpG,MAAAA,IAAI,EAAEsF,KAAK,CAACC,OAAN,CAAcN,MAAM,CAACjF,IAArB,IAA6BiF,MAAM,CAACjF,IAAP,CAAYwF,IAAZ,CAAiB,GAAjB,CAA7B,GAAqDP,MAAM,CAACjF,IAL1D;AAMRkF,MAAAA,KAAK,EAAEU,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASb,MAAM,CAACC,KAAhB,EAAuB,CAAvB,CAAT,EAAoC,EAApC;AANC,OAAV;AAQA,UAAM;AAAEa,MAAAA;AAAF,QAAW,MAAM,KAAKjC,UAAL,CAAgBkC,GAAhB,YAA2CP,GAA3C,CAAvB;AACA,WAAOM,IAAI,CAACvC,GAAL,CAAUE,KAAD,IAAW,IAAI/B,KAAJ,CAAU+B,KAAV,CAApB,CAAP;AACD;;;;;;;;;;"}