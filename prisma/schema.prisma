// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("METEORIUM_POSTGRES_URL")
}

enum ModerationAction {
    Ban
    TempBan
    Kick
    Mute
    Warn
    Unban
}

enum GuildFeatures {
    Moderation
    UserVerification
    Tags
    Music
    DiscordInfo
    HolodexAPI
    MojangAPI
    RobloxAPI
}

enum VerificationStatus {
    Waiting
    Approved
    Rejected
    Revoked
}

model Guild {
    GuildId                String                 @unique
    EnforceSayInExecutor   Boolean                @default(false)
    JoinLeaveLogChannelId  String                 @default("")
    PublicModLogChannelId  String                 @default("")
    LoggingChannelId       String                 @default("")
    BanAppealLink          String                 @default("")
    VerifyDetailEnabled    Boolean                @default(false)
    VerifyAttachEnabled    Boolean                @default(false)
    VerifyTempPaused       Boolean                @default(false)
    VerifyVerifiedRoleId   String                 @default("")
    VerifyUnverifiedRoleId String                 @default("")
    EnabledGuildFeatures   GuildFeatures[]
    ModerationCase         ModerationCase[]
    Tag                    Tag[]
    UserVerificationData   UserVerificationData[]
}

model ModerationCase {
    GlobalCaseId          Int                     @id @default(autoincrement())
    Guild                 Guild                   @relation(fields: [GuildId], references: [GuildId], onDelete: Cascade)
    GuildId               String
    CaseId                Int
    Action                ModerationAction
    TargetUserId          String
    ModeratorUserId       String
    Reason                String
    AttachmentProof       String                  @default("")
    Duration              String                  @default("0")
    ModeratorNote         String                  @default("")
    ModeratorAttachment   String                  @default("")
    NotAppealable         Boolean                 @default(false)
    Active                Boolean                 @default(true) // Used in ban
    RelatedCaseId         Int                     @default(-1) // Used in ban, does NOT use GlobalCaseId
    PublicModLogMsgId     String                  @default("")
    CreatedAt             DateTime                @default(now())
    ActiveTempBans        ActiveTempBans[]
    ModerationCaseHistory ModerationCaseHistory[]

    @@unique(name: "UniqueCaseIdPerGuild", fields: [GuildId, CaseId])
}

model ModerationCaseHistory {
    ModerationCaseHistoryId Int            @id @default(autoincrement())
    ModerationCase          ModerationCase @relation(fields: [GlobalCaseId], references: [GlobalCaseId], onDelete: Cascade)
    GlobalCaseId            Int
    EditedAt                DateTime       @default(now())
    EditorUserId            String
    Reason                  String?
    AttachmentProof         String?
    Duration                String?
    ModeratorNote           String?
    ModeratorAttachment     String?
    NotAppealable           Boolean?
    Removed                 Boolean?
}

model ActiveTempBans {
    ActiveTempBanId Int            @id @default(autoincrement())
    GlobalCaseId    Int            @unique
    Case            ModerationCase @relation(fields: [GlobalCaseId], references: [GlobalCaseId], onDelete: Cascade)
}

model Tag {
    GlobalTagId Int    @id @default(autoincrement())
    Guild       Guild  @relation(fields: [GuildId], references: [GuildId], onDelete: Cascade)
    GuildId     String
    TagName     String
    Content     String
    Attachment  String @default("")
}

model UserVerificationData {
    Guild   Guild                     @relation(fields: [GuildId], references: [GuildId], onDelete: Cascade)
    GuildId String
    UserId  String
    Banned  Boolean                   @default(false)
    History UserVerificationHistory[]

    @@unique(name: "UniqueUserPerGuild", fields: [GuildId, UserId])
}

model UserVerificationHistory {
    VerificationHistoryId Int                  @id @default(autoincrement())
    MainData              UserVerificationData @relation(fields: [GuildId, UserId], references: [GuildId, UserId], onDelete: Cascade)
    GuildId               String
    UserId                String
    Status                VerificationStatus   @default(Waiting)
    CheckerUserId         String               @default("")
    CheckerNote           String               @default("")
    Detail                String               @default("")
    Attachment            String               @default("")
    RejectReason          String               @default("")
    CreatedAt             DateTime             @default(now())
    UpdatedAt             DateTime             @default(now())
}

model UserVerificationAttachment {
    GuildId    String
    UserId     String
    Attachment String

    @@unique(name: "UniqueAttachmentPerUserPerGuild", fields: [GuildId, UserId])
}
